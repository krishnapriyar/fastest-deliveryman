/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ui;

import adt.LinkedList;
import entity.*;
import adt.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

/**
 *
 * @author Lysan Chen
 */
public class OrderItemList extends javax.swing.JFrame {

    LinkedList<RestaurantItem> itemList = new LinkedList<RestaurantItem>();

    String dbURL = "jdbc:derby://localhost:1527/Fast";

    public void setItemList(LinkedList<RestaurantItem> itemList) {
        this.itemList = itemList;
    }

    public LinkedList<RestaurantItem> getItemList() {
        return itemList;
    }

    Connection dbCon = null;
    PreparedStatement stmt = null;
    ResultSet rs = null;

    public OrderItemList() {
        initComponents();

        RestaurantItem item1 = new RestaurantItem(40001, "seafood", "food", 10.00, "Promo");
        RestaurantItem item2 = new RestaurantItem(40002, "ice", "food", 10.00, "No Promo");
        RestaurantItem item3 = new RestaurantItem(40003, "soup", "food", 10.00, "Promo");
        RestaurantItem item4 = new RestaurantItem(40004, "beef", "food", 10.00, "No Promo");

        itemList.add(item1);
        itemList.add(item2);
        itemList.add(item3);
        itemList.add(item4);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Sort By :");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Newest item first", "Promotional item first", "Oldest item first" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jButton1.setText("Save changes");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(135, 135, 135)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(104, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 247, Short.MAX_VALUE)
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed

    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        int index = jComboBox1.getSelectedIndex();
        String queryStr = " ";
//       String displayStr = "\"<html><body>";
        String displayStr = "Item ID\t Item Name\t Price\t Promotional Item\n";

        if (index == 0) {
            sortByNewest();
            queryStr = "SELECT ITEMID, ITEMNAME,ITEMUNITPRICE,PROMOTIONALINFO FROM ITEM ORDER BY ITEMID DESC";

        } else if (index == 1) {
            sortByPromo();
            queryStr = "SELECT ITEMID, ITEMNAME,ITEMUNITPRICE,PROMOTIONALINFO FROM ITEM ORDER BY PROMOTIONALINFO DESC";
        } else {
            sortByOldest();
            queryStr = "SELECT ITEMID, ITEMNAME,ITEMUNITPRICE,PROMOTIONALINFO FROM ITEM ORDER BY ITEMID";
        }

//            try{
//                DriverManager.registerDriver(new org.apache.derby.jdbc.ClientDriver());
//                Connection conn = DriverManager.getConnection(dbURL);
//                
//                
//
//                stmt = conn.prepareStatement(queryStr);
//                ResultSet rs = stmt.executeQuery();
//            
//                while(rs.next())
//                {   
//                   displayStr += rs.getString("ITEMID")+"\t" +rs.getString("ITEMNAME")+"\t" +rs.getDouble("ITEMUNITPRICE")+"\t "+rs.getString("PROMOTIONALINFO")+"\n";
//             
//                }
////                displayStr += "</body></html>\"";
//                jTextArea1.setText(displayStr);
//                
//            }catch (Exception ex){
//               System.out.println(ex.getMessage());
//            }       
    }//GEN-LAST:event_jButton1ActionPerformed

    public void sortByNewest() {
        
        int itemID = 40001;
        int listSize = itemList.getNumberOfEntries();

        LinkedStack<RestaurantItem> tempStack = new LinkedStack();

        while (tempStack.getSize() != listSize) {
            for (int i = 0; i < listSize; i++) {

                if (itemList.getEntry(i + 1).getItemID() == itemID) {
                    tempStack.push(itemList.getEntry(i + 1));

                }

            }
            itemID++;

        }
        String displayStr = "Item ID\t Item Name\t Price\t Promotional Item\n";
        int queueSize = tempStack.getSize();
        for (int i = 0; i < queueSize; i++) {
            RestaurantItem item = tempStack.pop();

            displayStr += item.getItemID() + "\t" + item.getItemName() + "\t" + item.getUnitPrice() + "\t " + item.getPromoInfo() + "\n";

        }
        jTextArea1.setText(displayStr);
    }

    public void sortByOldest() {

        int itemID = 40001;
        int listSize = itemList.getNumberOfEntries();

        CircularLinkedQueue<RestaurantItem> tempQueue = new CircularLinkedQueue();

        while (tempQueue.getSize() != listSize) {
            for (int i = 0; i < listSize; i++) {

                if (itemList.getEntry(i + 1).getItemID() == itemID) {
                    tempQueue.enqueue(itemList.getEntry(i + 1));

                }

            }
            itemID++;

        }
        String displayStr = "Item ID\t Item Name\t Price\t Promotional Item\n";
        int queueSize = tempQueue.getSize();
        for (int i = 0; i < queueSize; i++) {
            RestaurantItem item = tempQueue.dequeue();

            displayStr += item.getItemID() + "\t" + item.getItemName() + "\t" + item.getUnitPrice() + "\t " + item.getPromoInfo() + "\n";

        }
        jTextArea1.setText(displayStr);
    }

    public void sortByPromo() {

        LinkedList tempList1 = new LinkedList<RestaurantItem>();
        LinkedList tempList2 = new LinkedList<RestaurantItem>();
        RestaurantItem item;

        for (int i = 0; i < itemList.getNumberOfEntries(); i++) {

            item = itemList.getEntry(i + 1);

            if (item.getPromoInfo().equals("Promo")) {

                tempList1.add(item);
            } else {
                tempList2.add(item);
            }

        }

        for (int i = 0; i < tempList2.getNumberOfEntries(); i++) {
            tempList1.add(tempList2.getEntry(i + 1));
        }

        itemList = tempList1;
        String displayStr = "Item ID\t Item Name\t Price\t Promotional Item\n";

        for (int i = 0; i < itemList.getNumberOfEntries(); i++) {
            item = itemList.getEntry(i + 1);

            displayStr += item.getItemID() + "\t" + item.getItemName() + "\t" + item.getUnitPrice() + "\t " + item.getPromoInfo() + "\n";

        }
        jTextArea1.setText(displayStr);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderItemList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderItemList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderItemList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderItemList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderItemList().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
